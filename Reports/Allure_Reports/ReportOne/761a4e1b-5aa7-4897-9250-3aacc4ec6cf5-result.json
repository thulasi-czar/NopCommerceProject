{"name": "test_search_customer_by_email", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=118.0.5993.120)\nStacktrace:\n\tGetHandleVerifier [0x00007FF779B88EF2+54786]\n\t(No symbol) [0x00007FF779AF5612]\n\t(No symbol) [0x00007FF7799AA4FD]\n\t(No symbol) [0x00007FF7799E3F2A]\n\t(No symbol) [0x00007FF779A0BE6A]\n\t(No symbol) [0x00007FF7799E22E6]\n\t(No symbol) [0x00007FF779A0C080]\n\t(No symbol) [0x00007FF779A24D02]\n\t(No symbol) [0x00007FF779A0BC43]\n\t(No symbol) [0x00007FF7799E0941]\n\t(No symbol) [0x00007FF7799E1B84]\n\tGetHandleVerifier [0x00007FF779ED7F52+3524194]\n\tGetHandleVerifier [0x00007FF779F2D800+3874576]\n\tGetHandleVerifier [0x00007FF779F25D7F+3843215]\n\tGetHandleVerifier [0x00007FF779C25086+694166]\n\t(No symbol) [0x00007FF779B00A88]\n\t(No symbol) [0x00007FF779AFCA94]\n\t(No symbol) [0x00007FF779AFCBC2]\n\t(No symbol) [0x00007FF779AECC83]\n\tBaseThreadInitThunk [0x00007FF8EBA27344+20]\n\tRtlUserThreadStart [0x00007FF8ECEE26B1+33]", "trace": "self = <testCases.test_search_customer.Test_003_SearchCustomer object at 0x0000018166EF3C10>\n\n    def test_search_customer_by_email(self):\n        self.logger.info(\"************** test search customer by email id --started *****************\")\n        BaseClass(self.driver)\n        add_customer_page = AddCustomer(self.driver)\n        add_customer_page.go_to_add_customer_category()\n        add_customer_page.click_on_customer_list()\n    \n        search_page = SearchCustomer(self.driver)\n>       search_page.enter_email_id(self.email_id)\n\ntestCases\\test_search_customer.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects\\search_customer_page.py:17: in enter_email_id\n    email_field_box.clear()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:116: in clear\n    self._execute(Command.CLEAR_ELEMENT)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:394: in _execute\n    return self._parent.execute(command, params)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000018166F3D390>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF779AECC83]\\\\n\\\\tBaseThreadInitThunk [0x00007FF8EBA27344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FF8ECEE26B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=118.0.5993.120)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF779B88EF2+54786]\nE       \t(No symbol) [0x00007FF779AF5612]\nE       \t(No symbol) [0x00007FF7799AA4FD]\nE       \t(No symbol) [0x00007FF7799E3F2A]\nE       \t(No symbol) [0x00007FF779A0BE6A]\nE       \t(No symbol) [0x00007FF7799E22E6]\nE       \t(No symbol) [0x00007FF779A0C080]\nE       \t(No symbol) [0x00007FF779A24D02]\nE       \t(No symbol) [0x00007FF779A0BC43]\nE       \t(No symbol) [0x00007FF7799E0941]\nE       \t(No symbol) [0x00007FF7799E1B84]\nE       \tGetHandleVerifier [0x00007FF779ED7F52+3524194]\nE       \tGetHandleVerifier [0x00007FF779F2D800+3874576]\nE       \tGetHandleVerifier [0x00007FF779F25D7F+3843215]\nE       \tGetHandleVerifier [0x00007FF779C25086+694166]\nE       \t(No symbol) [0x00007FF779B00A88]\nE       \t(No symbol) [0x00007FF779AFCA94]\nE       \t(No symbol) [0x00007FF779AFCBC2]\nE       \t(No symbol) [0x00007FF779AECC83]\nE       \tBaseThreadInitThunk [0x00007FF8EBA27344+20]\nE       \tRtlUserThreadStart [0x00007FF8ECEE26B1+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException"}, "attachments": [{"name": "test_search_customer.py_Test_003_SearchCustomer_test_search_customer_by_email_2023-11-10_13-07-51.png", "source": "ba2dace6-9db5-4832-8ca0-8db651bf2fa1-attachment.png", "type": "image/png"}, {"name": "log", "source": "98b2fab5-3123-47fe-8022-2a1c9733a662-attachment.txt", "type": "text/plain"}], "start": 1699601846505, "stop": 1699601870877, "uuid": "1035b6b9-7988-41b5-9c11-b3080aa5961c", "historyId": "9b5c093ef25d7388c3f928735ac87c22", "testCaseId": "9b5c093ef25d7388c3f928735ac87c22", "fullName": "test_search_customer.Test_003_SearchCustomer#test_search_customer_by_email", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setupAndteardown')"}, {"name": "suite", "value": "test_search_customer"}, {"name": "subSuite", "value": "Test_003_SearchCustomer"}, {"name": "host", "value": "Thulasi510"}, {"name": "thread", "value": "2784-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_search_customer"}]}